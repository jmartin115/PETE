import threading
import sounddevice as sd
import voice_transcriber
import whisper
import webrtcvad
import re
import os
import ollama


def chat(message, model, messages):
        user_message = [{   
        'role': 'user',
        'content': message,
         }]
        messages.append(user_message[0])
        response = ollama.chat(model=model, options={"temperature":0.9}, messages=messages)
        #pre_answer = copy.deepcopy(response)
        answer = response['message']['content']

        #time = datetime.now()
        #timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        #response['message']['content'] += response['message']['content'] + " (Time generated: " + timestamp + ")"
        messages.append(response['message'])
        return answer




# Main function to start the threads for both microphones
def main():
    model = whisper.load_model('base')
    messages = []

    message = """
    
    You are an assistant to a suicide prevention hotline operator. You will see the conversation between an operator and a caller. You cannot message the caller, your responses are to help guide the operator

    """
    system_message = [{   
        'role': 'system',
        'content': message,
         }]
    messages.append(system_message[0])

    runchat = True

    operatorSpeaking = True
    while runchat:
        sample_rate = 24000
        agressiveness = 0
        vad = webrtcvad.Vad(int(agressiveness))
        segments = voice_transcriber.vad_collector(sample_rate, 30, 1500, vad)
        for i, segment in enumerate(segments):
            path = 'chunk-%002d.wav' % (i,)
            print(' Writing %s' % (path,))
            voice_transcriber.write_wave(path, segment, sample_rate)
            result = voice_transcriber.transcribe_speech(path, model)


            print("Transcription:")
            
            if operatorSpeaking:
                user_message = 'Role: Operator: ' + result['text']
                operatorSpeaking = False
            else:
                user_message = 'Role: Caller: ' + result['text']
                operatorSpeaking = True

            print(user_message)
    
            
            print("Prompt Sent")

            response = chat(user_message, "Llama3.1", messages)
        
            print("Ollama response:\n")
            print(response)


            os.remove(path)



if __name__ == "__main__":
    main()
